// Code generated by go-bindata.
// sources:
// tmp/LICENSES
// DO NOT EDIT!

package core

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmpLicenses = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\x51\x73\xe2\x38\xf2\xc0\xdf\xf5\x29\xba\xe6\xe1\x5f\x93\x7f\x79\x20\x93\xdd\xda\x87\xdd\x27\xc7\x28\x44\x3b\xc4\xe6\x2c\x93\x1c\x8f\xc2\x16\x58\x33\xb6\xe4\x93\x64\xb2\xdc\xa7\xbf\x92\x30\x60\x12\xe6\xf6\x92\xc9\xdd\x54\xed\xf0\x04\xc6\xb2\xd4\xdd\xea\xfe\xa9\xdb\xcd\x84\x44\x38\xa6\x98\x22\xb4\x12\xb6\x6c\x17\x83\x5c\xd5\xc3\x65\xa5\x4c\x5e\x0e\x1b\x25\x57\xea\x0a\x21\x94\x95\x1c\xee\x48\x06\x13\x91\x73\x69\x38\xbc\xbf\x23\xd9\x05\x42\x91\x6a\x36\x5a\xac\x4a\x0b\xef\xf3\x0b\xb8\xba\xfc\xf8\xd3\x87\xab\xcb\x8f\x3f\xc3\x4d\xa5\xb4\x60\x12\x68\x5e\x56\x2c\x2f\x2d\xd7\x08\x4d\xb9\xae\x85\x31\x42\x49\x10\x06\x4a\xae\xf9\x62\x03\x2b\xcd\xa4\xe5\x45\x00\x4b\xcd\x39\xa8\x25\xe4\x25\xd3\x2b\x1e\x80\x55\xc0\xe4\x06\x1a\xae\x8d\x92\xa0\x16\x96\x09\x29\xe4\x0a\x18\xe4\xaa\xd9\x80\x5a\x22\x5b\x0a\x03\x46\x2d\xed\x23\xd3\x1c\x98\x2c\x80\x19\xa3\x72\xc1\x2c\x2f\xa0\x50\x79\x5b\x73\x69\x99\x75\xeb\x2d\x45\xc5\x0d\xbc\xb7\x25\x87\x77\xb4\x7b\xe2\xdd\x85\x5f\xa4\xe0\xac\x02\x21\x91\xbb\xb7\xbb\x05\x8f\xc2\x96\xaa\xb5\xa0\xb9\xb1\x5a\xe4\x6e\x8e\x00\x84\xcc\xab\xb6\x70\x32\xec\x6e\x57\xa2\x16\xdd\x0a\xee\x71\x6f\x08\x03\x56\xa1\xd6\xf0\xc0\xcb\x19\x40\xad\x0a\xb1\x74\x9f\xdc\xab\xd5\xb4\x8b\x4a\x98\x32\x80\x42\xb8\xa9\x17\xad\xe5\x01\x18\xf7\xa3\xb7\x6b\xe0\xf4\x18\x2a\x0d\x86\x57\x95\x9b\x41\x70\xb3\xd5\xf5\x20\x9d\x1f\xe3\x44\x6f\x9c\x41\x6d\x67\x22\xb7\x2e\x3c\x96\xaa\x86\x23\x4d\x84\x81\x65\xab\xa5\x30\x25\xf7\xcf\x14\x0a\x8c\x0a\x90\x69\x17\x9f\x79\x6e\xdd\x2f\x6e\xf8\x52\x55\x95\x7a\x74\xaa\xe5\x4a\x16\xc2\x69\x64\x7e\xdd\x6e\x3a\x5b\xa8\x35\xf7\xba\x6c\xf7\x59\x2a\x2b\xf2\xad\xb9\xfd\x06\x34\x87\x5d\xed\x6e\x99\x92\x55\x15\x2c\x78\x67\x30\x5e\x80\x90\xc0\xaa\x0a\xed\xd4\xd1\x4e\x61\x63\x99\xb4\x82\x55\xd0\x28\xed\xd7\x73\x9b\xdf\x17\x7d\x80\x50\x76\x8b\x81\x26\x37\xd9\x43\x98\x62\x20\x14\xa6\x69\x72\x4f\x46\x78\x04\xef\x42\x0a\x84\xbe\x0b\xe0\x81\x64\xb7\xc9\x2c\x83\x87\x30\x4d\xc3\x38\x9b\x43\x72\x03\x61\x3c\x87\x4f\x24\x1e\x05\x80\xff\x3e\x4d\x31\xa5\x90\xa4\x88\xdc\x4d\x27\x04\x8f\x02\x20\x71\x34\x99\x8d\x48\x3c\x86\xeb\x59\x06\x71\x92\xc1\x84\xdc\x91\x0c\x8f\x20\x4b\xc0\x2d\xd8\x4d\x45\x30\x75\x93\xdd\xe1\x34\xba\x0d\xe3\x2c\xbc\x26\x13\x92\xcd\x03\xb8\x21\x59\x8c\x29\x45\x37\x49\x0a\x21\x4c\xc3\x34\x23\xd1\x6c\x12\xa6\x30\x9d\xa5\xd3\x84\x62\x08\xe3\x11\xc4\x49\x4c\xe2\x9b\x94\xc4\x63\x7c\x87\xe3\x6c\x00\x24\x86\x38\x01\x7c\x8f\xe3\x0c\xe8\x6d\x38\x99\xf8\xa5\xc2\x59\x76\x9b\xa4\x5e\xbe\x28\x99\xce\x53\x32\xbe\xcd\xe0\x36\x99\x8c\x70\x4a\xe1\x1a\xc3\x84\x84\xd7\x13\x0c\x7e\xa9\x78\x0e\xd1\x24\x24\x77\x01\x8c\xc2\xbb\x70\xec\xa4\x4b\x21\xc9\x6e\x71\xea\x87\x75\xd2\x3d\xdc\x62\xf7\x13\x22\x31\x84\x31\x84\x51\x46\x92\xd8\xa9\x11\x25\x71\x96\x86\x51\x16\x40\x96\xa4\xd9\xfe\xd1\x07\x42\x71\x00\x61\x4a\xa8\x33\xc8\x4d\x9a\xdc\x05\xe0\xcc\x99\xdc\xb8\x21\x24\x46\x51\x12\xc7\x78\x3b\x8b\x33\x35\x1c\xed\x48\x92\xfa\xeb\x19\xc5\x07\x59\x46\x38\x9c\x90\x78\x4c\x9d\xc6\xfd\xc1\x03\x84\x8e\xf8\xb2\x2a\x55\x61\xcc\x70\xc3\xea\xea\x05\x74\xf9\x19\x28\xab\x61\xec\x9e\x7d\x5b\x9e\x20\xef\x7c\x6f\xc5\x13\x24\x24\xbc\x19\x4f\x90\x55\xf0\x36\x3c\xd9\x07\xe0\x71\xa0\xbd\x90\x27\xe8\x04\x4f\xe0\xcc\x93\x57\xf2\x04\x75\x3c\x81\x37\xe0\x09\x3a\xf0\x04\xbe\x81\x27\xe8\x39\x4f\xe0\xf5\x3c\x41\x7d\x9e\xc0\xb7\xf2\x04\xf5\x79\xf2\x0c\x0f\x57\xe0\x3c\x6c\xac\x20\x6c\x6d\xa9\xb4\x19\x40\x58\x55\xbb\x63\x59\x73\xc3\xf5\x9a\x17\x03\x84\x52\xbe\x8f\x16\xe7\x67\xce\xf7\x5a\xe3\xfc\x0b\x8c\x6a\x75\xe7\x8d\x0b\x21\x99\xde\xc0\x52\xe9\xda\x04\x3e\x44\x9d\xa7\x75\xa1\x8a\x7c\x18\x8a\x9c\x6d\x43\xd9\x45\xc6\x36\x7a\x1c\x2b\x1a\xad\xd6\xc2\xf9\xa9\x2d\x99\xfd\x6a\x3c\xb8\x87\x50\xcd\xed\xaf\x08\x01\xc0\xff\xc3\xb1\x50\xde\x7d\x3b\x69\x72\x55\x70\xa8\x5b\xe3\xf8\xe1\xb0\xe5\xa7\x7c\x12\x47\x68\x1b\x2c\xc1\x36\x88\x2a\x61\xac\x87\x5f\x6f\x35\x1f\x60\x7d\x51\x0a\x61\xf2\x8a\x89\x9a\xeb\xc1\x69\x09\x84\xec\x1b\x61\x27\x41\xa3\x55\xd1\xe6\xfc\x20\x04\x7a\x1a\xcc\xaf\x13\x62\x07\xcd\x63\xd2\x76\xf8\x52\xb6\xe4\x1a\x6a\x66\xb9\x16\xac\x32\x07\x13\xfb\x7d\xb1\x25\x47\x7d\xd1\x3b\x7d\x62\x2e\xfc\x63\x6e\x56\xc9\x6a\x7f\x1c\x8c\x95\x5a\x55\x1c\x88\xcc\x07\x20\xd5\xe1\x9e\xb7\xb7\xb0\x06\xe5\x4a\x6e\xe7\x51\xda\x40\xcd\x36\x0e\x3c\xad\xd9\xc2\x8e\xcb\x42\x69\xc3\x9d\x1f\x34\x5a\xd5\xca\x72\xd8\x5a\xc3\x1a\x28\xb8\x16\x6b\x5e\xc0\x52\xab\xfa\x49\x6a\xba\xc3\xbb\x69\x78\xee\x9c\x06\x1a\x2d\x9c\x2b\x69\xe7\x2e\xb2\x47\x3c\x8f\x28\x42\x4f\x33\xea\x7a\xee\xa3\xe3\x79\x60\x3b\x40\xf8\x78\x24\xd7\xb3\x2c\x49\x29\xea\x68\xe6\x6f\xb8\x38\x3f\x60\x0b\x3a\x6c\xf5\xa0\xd4\x23\x58\xb0\x43\x18\x3a\x20\x2c\xf0\x8b\x3e\x7f\xec\x04\xcb\xfc\x7a\x3d\x9c\xa1\xd3\x38\x4b\x31\x8c\x08\xf5\xec\xc1\xa3\xaf\x65\x46\x7b\x2d\x51\xf2\x10\xe3\x74\x4b\xb4\x83\x8a\x27\x60\x36\x22\x29\x76\x3c\x22\xf1\xe1\x5b\x44\x46\x38\xce\xc2\x49\x80\xe8\x14\x47\x24\x9c\x38\x84\xe3\xbb\xe9\x24\x4c\xe7\x41\x37\x27\xc5\x7f\x9b\xe1\x38\x23\xe1\x64\x0f\xc2\xf7\x7f\x62\x91\x69\x9a\x44\xb3\xd4\x93\xd8\x99\x81\xce\xae\x69\x46\xb2\x59\x86\x61\x9c\x24\x23\x6f\x67\x8a\xd3\x7b\x12\x61\xfa\x1b\x4c\x12\xea\x8d\x35\xa3\x38\x40\xa3\x30\x0b\xfd\xc2\xd3\x34\xb9\x21\x19\xfd\xcd\x7d\xbf\x9e\x51\xe2\x6d\x46\xe2\x0c\xa7\xe9\x6c\xea\xf0\x78\x01\xb7\xc9\x03\xbe\xc7\x29\x44\xe1\x8c\xe2\x91\x37\x6e\xe2\x28\x3c\x77\xc7\x58\x92\xfa\xa3\xe9\x34\xa9\x0f\x70\xa6\x59\x4a\xa2\xac\x3f\xcc\x31\x36\x49\x33\x74\xd0\x11\x62\x3c\x9e\x90\x31\x8e\x23\x7c\xc4\xf1\x8b\x3d\xc7\x3d\xfc\xe7\xf0\x10\xce\x77\xc9\x61\x87\x69\xe4\xbf\xf6\x1c\x36\xf0\x1b\x09\xe4\x06\xc2\xd1\x3d\x71\x62\x77\x83\xa7\x09\xa5\xa4\x73\x13\x6f\xb2\xe8\xb6\x33\xf7\xd3\xc4\xf0\xb3\x2a\xd5\x70\xa5\x0a\x65\xb9\x5c\x9f\x82\xfc\x4f\xf0\xbb\x2a\x25\x5c\x33\x6d\x95\x44\xa8\x97\x36\xbe\x51\x4a\x88\xf6\x25\xe6\xeb\x52\x42\xf4\x95\x12\xf3\x25\x29\x21\xfa\xb3\x12\xf3\x3f\x48\x09\xd1\x8b\x4a\xcc\x93\x29\x21\x7a\x7d\x89\xd9\x4b\x09\xd1\x7f\x2d\x25\x44\x4f\x52\x42\xf8\x5f\xa7\x84\xe8\x39\x5b\x5f\x9a\x12\xa2\xaf\x95\x98\xff\x36\x25\x44\x2f\x2e\x31\x4f\xa6\x84\xe8\xd5\x25\xe6\x51\x4a\x88\x5e\x5f\x62\xf6\x52\x42\xf4\x06\x25\x66\x1f\x25\x35\xb3\x56\x0e\x57\xea\x83\x6e\x25\x7f\x14\x85\x2d\x5f\x50\x6a\xfe\x02\x73\x66\xda\x52\x68\x05\x77\xcc\x9a\xb6\x56\x56\x9d\x6b\xce\x73\xcd\x79\xae\x39\x7f\xe8\x9a\xb3\xcf\x17\x55\xf1\x2f\xed\x17\x25\xbf\xa8\xa1\x65\x8b\x8a\xbb\x84\x9e\xeb\xe3\x9c\x25\xea\xde\x5b\x2d\x36\x90\xb8\xe1\xf0\xc9\x8d\x3f\x83\xe4\x47\x06\x09\xfa\x1e\x99\xca\x19\x24\xdf\x15\x24\xe8\x69\xa6\xd2\xe3\x88\x15\xc5\x23\xab\xaa\xe1\xea\xb3\x71\x15\xcd\x0b\x52\x94\xdf\x95\x29\xe1\x9a\x7d\x39\xb7\xd7\xce\xed\xb5\xbf\x44\x6a\x72\x6e\xaf\xbd\x4d\x7b\x6d\x87\x94\x9a\xd9\xfc\x65\x55\xcf\x19\x29\x67\xa4\x9c\x91\x72\x46\x4a\x87\x14\xd5\x7c\x59\x0d\x84\x1c\xb6\x7a\xc9\xd6\x7c\x98\x57\x62\xb0\xfe\x88\x9e\xbc\x76\x3d\x85\x11\xae\x79\xbd\x01\xca\xb8\xfc\x27\xfc\x1f\x44\xbd\xae\xca\xb9\xf8\xf9\x91\x8b\x9f\xbf\x0c\x57\xce\xc5\xcf\xb7\xbc\x45\xd9\x71\x65\xc3\xea\x6a\xb0\xbe\x3a\x7a\x69\x72\x75\xf9\xf1\xe3\x07\x4f\x91\x88\x49\x25\x45\xce\x2a\x98\xd8\x62\x80\x50\x47\x9c\x02\x5a\x59\x74\x8d\xdd\xb0\x61\x79\xc9\x77\x2c\x0a\xe0\x9e\x6b\xef\x82\x57\x83\xcb\x2e\xcc\xbb\x5b\xef\x2e\x7e\x43\x1b\xd5\xfa\x9e\xae\x54\xd6\x77\xfc\xbd\xdf\x3a\x24\x00\xff\x23\xe7\x8d\x75\xfe\x99\xab\xba\xa9\x04\x93\x39\xdf\x37\x97\x77\xb3\x0f\xd0\xbc\x9b\x60\x4b\x21\xe8\x77\x8a\xf6\xa3\x80\x59\xdf\xd2\x87\xd2\xda\xe6\xd7\xe1\xf0\xf1\xf1\x71\xc0\xbc\x94\x03\xa5\x57\xc3\x2e\xbe\xcd\xb0\xfb\xdf\xe5\x87\xab\xc1\x25\x42\x33\x59\x71\x63\x40\xf3\x7f\xb4\x42\xf3\x02\x16\x1b\x60\x4d\x53\x89\x9c\x2d\x2a\x0e\x15\x7b\x74\xc1\xc2\x56\x9a\x6f\x83\x57\x48\xdf\x3e\x16\x72\x15\xec\xc1\xd7\xeb\xf7\xf4\x0d\xb4\x93\x4a\x18\xe8\x0f\xf0\xbd\xf5\x5d\xf8\xc0\x75\x48\x09\x0d\xd0\x93\x20\x22\xb8\xf3\xc8\x78\x44\xdc\xce\xd3\xe3\xa0\xea\xda\xeb\xfc\x8f\x46\x3b\xd9\x95\x06\xe1\x4c\xc7\x8b\x01\xa2\x9c\x1f\x2d\xbe\xec\x5a\xed\xfb\x16\x78\xc5\xe4\xaa\x65\x2b\x0e\x2b\xb5\xe6\xda\xf3\xfc\xc0\x0f\xff\x47\x01\x74\x60\xaa\x79\xae\xce\xc0\x23\xe9\x40\xab\x2d\xd7\x1f\xb9\xe6\x1e\x23\x5b\x2b\x8d\x95\x6f\xc7\x43\xd4\xdd\x56\x4b\xa8\xc4\xc2\xb9\x5c\x47\xce\xb2\x35\xc8\xb1\xd1\x58\xe1\x93\xb7\x35\xef\x6c\x6f\x4b\x2e\x34\x28\x2d\x56\x42\xb2\xaa\x07\x3d\xf7\x58\xb7\x83\xdb\x3f\x6e\x00\x6b\x44\x3e\x58\x29\xff\x9d\xfb\x7f\x80\xe8\xfd\x75\xc3\xb4\xe9\x5d\x6a\xce\x8a\xde\xa5\xc9\x99\x94\xbd\xeb\xed\xfb\xc3\xfd\xa5\x93\xb3\xec\x5f\x34\x5a\xac\x99\xe5\xfe\xb7\x67\x67\xee\xe5\x2f\xf0\x49\x68\xa7\x06\x15\xb5\x92\x6a\x7d\x4e\xdf\x5f\x9b\xbe\xa3\x6f\x3b\x66\x9f\xa6\xef\xe8\x7c\xcc\x9e\x8f\xd9\xef\x73\xcc\xfe\x2b\x00\x00\xff\xff\xdb\xf7\x8d\xbf\xdb\x2f\x00\x00")

func tmpLicensesBytes() ([]byte, error) {
	return bindataRead(
		_tmpLicenses,
		"tmp/LICENSES",
	)
}

func tmpLicenses() (*asset, error) {
	bytes, err := tmpLicensesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/LICENSES", size: 12251, mode: os.FileMode(420), modTime: time.Unix(1480250005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmp/LICENSES": tmpLicenses,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmp": &bintree{nil, map[string]*bintree{
		"LICENSES": &bintree{tmpLicenses, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

