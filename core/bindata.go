// Code generated by go-bindata.
// sources:
// tmp/LICENSES
// DO NOT EDIT!

package core

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmpLicenses = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\x5f\x77\xda\x3a\x12\xc0\xdf\xf5\x29\xe6\xf4\x61\x4f\xb3\xc7\x85\x34\xf7\x9e\x3e\xb4\x4f\x8e\x51\x40\x2d\xd8\xac\x6d\x92\xe5\x51\xd8\x02\xab\xb1\x25\xaf\x24\xc3\x65\x3f\xfd\x1e\x09\x03\x4e\x42\xf7\xde\xa4\xd9\xed\x39\x2d\x4f\x60\x5b\x7f\x66\xc6\x33\x3f\xcf\x78\x1c\x4d\x71\x08\x49\x34\x8b\x03\x0c\x63\x12\xe0\x30\xc1\x09\x42\xd5\xf6\x9e\x21\x84\x26\x24\x85\x31\xcf\x98\xd0\x0c\xa1\x40\xd6\x5b\xc5\x57\x85\x81\xb7\xd9\x05\x5c\x5d\xbe\xff\x00\x43\x89\x1b\x25\x21\x55\x74\xcd\x4a\x18\x56\x8b\x11\x42\x53\xa6\x2a\xae\x35\x97\x02\xb8\x86\x82\x29\xb6\xd8\xc2\x4a\x51\x61\x58\xee\xc1\x52\x31\x06\x72\x09\x59\x41\xd5\x8a\x79\x60\x24\x50\xb1\x85\x9a\x29\x2d\x05\xc8\x85\xa1\x5c\x70\xb1\x02\x0a\x99\xac\xb7\x48\x2e\xc1\x14\x5c\x83\x96\x4b\xb3\xa1\x8a\x01\x15\x39\x50\xad\x65\xc6\xa9\x61\x39\xe4\x32\x6b\x2a\x26\x0c\x35\x76\xbf\x25\x2f\x99\x86\xb7\xa6\x60\xf0\x26\x69\x67\xbc\xb9\x70\x9b\xe4\x8c\x96\x88\x0b\xb0\xd7\xf6\x97\x60\xc3\x4d\x21\x1b\x03\x8a\x69\xa3\x78\x66\xd7\xf0\x80\x8b\xac\x6c\x72\x2b\xc3\xfe\x72\xc9\x2b\xde\xee\x60\xa7\x3b\x1b\x68\x64\x24\x34\x9a\x79\x4e\x4e\x0f\x2a\x99\xf3\xa5\xfd\x65\x4e\xad\xba\x59\x94\x5c\x17\x1e\xe4\xdc\x2e\xbd\x68\x0c\xf3\x40\xdb\x93\xce\x98\x9e\xd5\xa3\x2f\x15\x68\x56\x96\x28\x93\x35\x67\x1a\x9c\xae\x47\xe9\xdc\x18\x2b\x7a\x6d\x0d\x6a\x5a\x13\x69\x7b\x66\x53\xc8\xea\xa1\x26\x5c\xa3\x65\xa3\x04\xd7\x05\x73\x73\x72\x09\x5a\xba\x1d\xbf\xb2\xcc\xd8\x33\x76\xf8\x52\x96\xa5\xdc\x58\xd5\x32\x29\x72\x6e\x35\xd2\x1f\x11\x4a\x0b\x06\x74\x21\xd7\xcc\xe9\xb2\xbb\xc5\x42\x1a\x9e\xed\xcc\xed\x6e\x40\x7d\xbc\xab\xed\x25\x5d\xd0\xb2\x84\x05\x6b\x0d\xc6\x72\xe0\x02\x68\x47\x1d\x65\xb7\xd7\x86\x0a\xc3\x69\x09\xb5\x54\x6e\xbf\xc7\x6a\xf6\x10\x4a\x47\x18\x92\xe8\x26\xbd\xf3\x63\x0c\x24\x81\x69\x1c\xdd\x92\x01\x1e\xc0\x1b\x3f\x01\x92\xbc\xf1\xe0\x8e\xa4\xa3\x68\x96\xc2\x9d\x1f\xc7\x7e\x98\xce\x21\xba\x01\x3f\x9c\xc3\x17\x12\x0e\x3c\xc0\xff\x9c\xc6\x38\x49\x20\x8a\x11\x99\x4c\xc7\x04\x0f\x3c\x20\x61\x30\x9e\x0d\x48\x38\x84\xeb\x59\x0a\x61\x94\xc2\x98\x4c\x48\x8a\x07\x90\x46\x60\x37\x6c\x97\x22\x38\xb1\x8b\x4d\x70\x1c\x8c\xfc\x30\xf5\xaf\xc9\x98\xa4\x73\x0f\xdd\x90\x34\xb4\x6b\xde\x44\x31\xf8\x30\xf5\xe3\x94\x04\xb3\xb1\x1f\xc3\x74\x16\x4f\xa3\x04\x83\x1f\x0e\x20\x8c\x42\x12\xde\xc4\x24\x1c\xe2\x09\x0e\xd3\x1e\x90\x10\xc2\x08\xf0\x2d\x0e\x53\x48\x46\xfe\x78\x6c\xb7\x42\xfe\x2c\x1d\x45\xb1\x95\x0f\x82\x68\x3a\x8f\xc9\x70\x94\xc2\x28\x1a\x0f\x70\x9c\xc0\xb5\x0d\x3b\xff\x7a\x8c\x77\x5b\x85\x73\x08\xc6\x3e\x99\x78\x30\xf0\x27\xfe\x10\xbb\x59\x51\x3a\xc2\x31\xb2\xc3\x76\xd2\xc1\xdd\x08\xdb\x53\x76\x3f\x3f\x04\x3f\x48\x49\x14\x5a\x35\x82\x28\x4c\x63\x3f\x48\x3d\x48\xa3\x38\x3d\x4c\xbd\x23\x09\xf6\xc0\x8f\x49\x62\x0d\x72\x13\x47\x13\x0f\x59\x73\x46\x37\x76\x08\x09\xed\xbc\x10\xef\x56\xb1\xa6\x86\x07\x77\x24\x8a\xdd\xf1\x2c\xc1\x87\x05\x61\x80\xfd\x31\x09\x87\x89\x9d\x6c\x55\xdc\x0f\xee\x21\x84\xd0\x8a\x9b\xa2\x59\xf4\x32\x59\xf5\x97\xa5\xd4\x59\xd1\xaf\xa5\x58\xc9\x2b\xb4\x73\xb5\x0e\x54\xe0\xed\x84\xa4\x17\x27\xd0\xf2\xdb\xbb\xab\xcb\xf7\xbf\xc3\x4d\x29\x15\xa7\x02\x92\xac\x28\x69\x56\x18\xa6\x5e\x97\x2f\x20\x97\xe8\xf5\xf8\x02\x5c\xa0\x57\xe3\x0b\x18\x89\x5e\x87\x2f\x70\xe0\x0b\xfa\x0e\xbe\xc0\x09\xbe\xa0\x33\x5f\x5e\xc8\x17\x68\xf9\x82\x5e\x81\x2f\x70\xe4\x0b\xfa\x0e\xbe\xc0\x53\xbe\xa0\x97\xf3\x05\xba\x7c\x41\xdf\xcb\x17\xf8\x16\x5f\x56\x85\xcc\xb5\xee\x6f\x69\x55\x3e\x83\x2e\xbf\x43\x42\x2b\x18\xda\xb9\xe7\x7c\xe5\x9c\xaf\xfc\x04\x3c\x39\xe7\x2b\x2f\xcf\x57\x9e\xe0\xe1\x0a\xac\x87\x0d\x25\xf8\x8d\x29\xa4\xd2\x3d\xf0\xcb\x72\xff\x58\x56\x4c\x33\xb5\x66\x79\x0f\xa1\x98\x1d\xa2\xc5\xfa\x99\xf5\xbd\x46\x5b\xff\x02\x2d\x1b\xd5\x7a\xe3\x82\x0b\xaa\xb6\xb0\x94\xaa\xd2\x9e\x0b\x51\xeb\x69\x6d\xa8\x22\x17\x86\x3c\xa3\xbb\x50\xb6\x91\xb1\x8b\x1e\xcb\x8a\x5a\xc9\x35\xb7\x7e\x6a\x0a\x6a\xbe\x19\x0f\x76\x12\xaa\x98\xf9\x88\x10\x00\xfc\x1d\x1e\x0a\xe5\xdc\xb7\x95\x26\x93\x39\x83\xaa\xd1\x96\x1f\x16\x5b\x6e\xc9\x47\x71\x84\x76\xc1\xe2\xed\x82\xa8\xe4\xda\x38\xf8\x75\x76\x73\x01\xd6\x15\x25\xe7\x3a\x2b\x29\xaf\x98\xea\x9d\x96\x80\x8b\xae\x11\xf6\x12\xd4\x4a\xe6\x4d\xc6\x8e\x42\xa0\xc7\xc1\xfc\x32\x21\xf6\xd0\x7c\x48\xda\x16\x5f\xd2\x14\x4c\x41\x45\x0d\x53\x9c\x96\xfa\x68\x62\x77\x5f\x4c\xc1\x50\x57\xf4\x56\x9f\x90\x71\x37\xcd\xae\x2a\x68\xe5\x1e\x07\x43\x29\x57\x25\x03\x22\xb2\x1e\x08\x79\xbc\xe6\xec\xcd\x8d\x46\x99\x14\xbb\x75\xa4\xd2\x50\xd1\xad\x05\x4f\xa3\x77\xb0\x63\x22\x97\x4a\x33\xeb\x07\xb5\x92\x95\x34\x0c\x76\xd6\x30\x1a\x72\xa6\xf8\x9a\xe5\xb0\x54\xb2\x7a\x94\x9a\xee\xf1\xae\x6b\x96\x59\xa7\x81\x5a\x71\xeb\x4a\xca\xba\x8b\xe8\x10\xcf\x21\x8a\x24\xa7\x19\x75\x3d\x77\xd1\xf1\x34\xb0\x2d\x20\x5c\x3c\x92\xeb\x59\x1a\xc5\x09\x6a\x69\xe6\x2e\xd8\x38\x3f\x62\x0b\x5a\x6c\x75\xa0\xd4\x21\x98\xb7\x47\x18\x3a\x22\xcc\x73\x9b\x3e\x9d\x76\x82\x65\x6e\xbf\x0e\xce\xd0\x69\x9c\xc5\x18\x06\x24\x71\xec\xc1\x83\x6f\x65\x46\x07\x2d\x51\x74\x17\xe2\x78\x47\xb4\xa3\x8a\x27\x60\x36\x20\x31\xb6\x3c\x22\xe1\xf1\x5f\x40\x06\x38\x4c\xfd\xb1\x87\x92\x29\x0e\x88\x3f\xb6\x08\xc7\x93\xe9\xd8\x8f\xe7\x5e\xbb\x66\x82\xff\x31\xc3\x61\x4a\xfc\xf1\x01\x84\x6f\xff\xc4\x22\xd3\x38\x0a\x66\xb1\x23\xb1\x35\x43\x32\xbb\x4e\x52\x92\xce\x52\x0c\xc3\x28\x1a\x38\x3b\x27\x38\xbe\x25\x01\x4e\x3e\xc1\x38\x4a\x9c\xb1\x66\x09\xf6\xd0\xc0\x4f\x7d\xb7\xf1\x34\x8e\x6e\x48\x9a\x7c\xb2\xff\xaf\x67\x09\x71\x36\x23\x61\x8a\xe3\x78\x36\xb5\x78\xbc\x80\x51\x74\x87\x6f\x71\x0c\x81\x3f\x4b\xf0\xc0\x19\x37\xb2\x14\x9e\xdb\xc7\x58\x14\xbb\x47\xd3\x69\x52\x1f\xe1\x9c\xa4\x31\x09\xd2\xee\x30\xcb\xd8\x28\x4e\xd1\x51\x47\x08\xf1\x70\x4c\x86\x38\x0c\xf0\x03\x8e\x5f\x1c\x38\xee\xe0\x3f\x87\x3b\x7f\xbe\x4f\x0e\x5b\x4c\x23\xf7\xb7\xe3\xb0\x9e\xbb\x91\x40\x6e\xc0\x1f\xdc\x12\x2b\x76\x3b\x78\x1a\x25\x09\x69\xdd\xc4\x99\x2c\x18\xb5\xe6\x7e\x9c\x18\x7e\x95\x85\xec\xaf\x64\x2e\x0d\x13\xeb\x53\x90\xff\x0d\x3e\xcb\x42\xc0\x35\x55\x46\x8a\x47\x6f\xba\x5e\x25\x25\x44\x87\x12\xf3\x65\x29\x21\xfa\x46\x89\xf9\x9c\x94\x10\xfd\x59\x89\xf9\x17\x52\x42\xf4\xac\x12\xf3\x64\x4a\x88\x5e\x5e\x62\x76\x52\x42\xf4\x3f\x4b\x09\xd1\xa3\x94\x10\xfe\xdf\x29\x21\x7a\xca\xd6\xe7\xa6\x84\xe8\x5b\x25\xe6\x7f\x4d\x09\xd1\xb3\x4b\xcc\x93\x29\x21\x7a\x71\x89\xf9\x20\x25\x44\x2f\x2f\x31\x3b\x29\x21\x7a\x85\x12\xb3\x8b\x92\x8a\x1a\x23\xfa\x2b\xf9\x4e\x35\x82\x6d\x78\x6e\x8a\x67\x94\x9a\x1f\x60\x4e\x75\x53\x70\x25\x61\x42\x8d\x6e\x2a\x69\xe4\xb9\xe6\x3c\xd7\x9c\xe7\x9a\xf3\x97\xae\x39\xbb\x7c\x91\x25\xbb\x6f\xee\xa5\xb8\x97\x7d\x43\x17\x25\xb3\x09\x3d\x53\x0f\x73\x96\xa0\x7d\x6f\xb5\xd8\x42\x64\x87\xc3\x17\x3b\xfe\x0c\x92\x5f\x19\x24\xe8\x47\x64\x2a\x67\x90\xfc\x50\x90\xa0\xc7\x99\x4a\x87\x23\x86\xe7\x1b\x5a\x96\xfd\xd5\x57\x6d\x2b\x9a\x67\xa4\x28\x9f\xa5\x2e\xe0\x9a\xde\x9f\xdb\x6b\xe7\xf6\xda\x4f\x91\x9a\x9c\xdb\x6b\xaf\xd3\x5e\xdb\x23\xa5\xa2\x26\x7b\x5e\xd5\x73\x46\xca\x19\x29\x67\xa4\x9c\x91\xd2\x22\x45\xd6\xf7\xab\x1e\x17\xfd\x46\x2d\xe9\x9a\xf5\xb3\x92\xf7\xd6\xef\xff\xc2\x07\x86\x9f\x99\x62\xd5\x16\x12\xca\xc4\xbf\xe1\x6f\x10\x74\xba\x2a\xe7\xe2\xe7\x57\x2e\x7e\x7e\x1a\xae\x9c\x8b\x9f\xef\x79\x8b\xb2\xe7\xca\x96\x56\x65\x6f\x7d\xf5\xe0\xa5\xc9\xd5\xe5\xfb\xf7\xef\x1c\x45\x02\x2a\xa4\xe0\x19\x2d\x61\x6c\xf2\x1e\x42\x2d\x71\x72\x68\x44\xde\x36\x76\xfd\x9a\x66\x05\xdb\xb3\xc8\x83\x5b\xa6\x9c\x0b\x5e\xf5\x2e\xdb\x30\x6f\x2f\xbd\xb9\xf8\x84\xb6\xb2\x71\x3d\x5d\x21\x8d\xeb\xf8\x3b\xbf\xb5\x48\x00\xf6\x47\xc6\x6a\x63\xfd\x33\x93\x55\x5d\x72\x2a\x32\x76\x68\x2e\xef\x57\xef\xa1\x79\xbb\xc0\x8e\x42\xd0\xed\x14\x1d\x46\x01\x35\xae\xa5\x0f\x85\x31\xf5\xc7\x7e\x7f\xb3\xd9\xf4\xa8\x93\xb2\x27\xd5\xaa\xdf\xc6\xb7\xee\xb7\x1f\x6d\xbf\xbb\xea\x5d\x22\x34\x13\x25\xd3\x1a\x14\xfb\x57\xc3\x15\xcb\x61\xb1\x05\x5a\xd7\x25\xcf\xe8\xa2\x64\x50\xd2\x8d\x0d\x16\xba\x52\x6c\x17\xbc\x5c\xb8\xf6\x31\x17\x2b\xef\x00\xbe\x4e\xbf\xa7\x6b\xa0\xbd\x54\x5c\x43\x77\x80\xeb\xad\xef\xc3\x07\xae\xfd\x84\x24\x1e\x7a\x14\x44\x04\xb7\x1e\x19\x0e\x88\xbd\xf3\xc9\xc3\xa0\x6a\xdb\xeb\xec\x8f\x5a\x59\xd9\xa5\x02\x6e\x4d\xc7\xf2\x1e\x4a\x18\x7b\xb0\xf9\xb2\x6d\xb5\x1f\x5a\xe0\x25\x15\xab\x86\xae\x18\xac\xe4\x9a\x29\xc7\xf3\x23\x3f\xdc\x87\x02\xe8\xc8\x54\xfd\x54\x9d\x9e\x43\xd2\x91\x56\x3b\xae\x6f\x98\x62\x0e\x23\x3b\x2b\x0d\xa5\x6b\xc7\x43\xd0\x5e\x96\x4b\x28\xf9\xc2\xba\x5c\x4b\xce\xa2\xd1\xc8\xb2\x51\x1b\xee\x92\xb7\x35\x6b\x6d\x6f\x0a\xc6\x15\x48\xc5\x57\x5c\xd0\xb2\x03\x3d\x3b\xad\xbd\x83\xbb\x0f\x37\x80\xd6\x3c\xeb\xad\xa4\xfb\xcf\xdc\x17\x20\xea\x70\x5c\x53\xa5\x3b\x87\x8a\xd1\xbc\x73\xa8\x33\x2a\x44\xe7\x78\xf7\xfe\xf0\x70\x68\xe5\x2c\xba\x07\xb5\xe2\x6b\x6a\x98\x3b\xf7\xe4\x99\x7b\xf9\x01\xbe\x70\x65\xd5\x48\x78\x25\x85\x5c\x9f\xd3\xf7\x97\xa6\xef\xe8\xfb\x1e\xb3\x8f\xd3\x77\x74\x7e\xcc\x9e\x1f\xb3\x3f\xe6\x31\xfb\x9f\x00\x00\x00\xff\xff\xfc\x17\xd1\x65\x24\x34\x00\x00")

func tmpLicensesBytes() ([]byte, error) {
	return bindataRead(
		_tmpLicenses,
		"tmp/LICENSES",
	)
}

func tmpLicenses() (*asset, error) {
	bytes, err := tmpLicensesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/LICENSES", size: 13348, mode: os.FileMode(420), modTime: time.Unix(1480268181, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmp/LICENSES": tmpLicenses,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmp": &bintree{nil, map[string]*bintree{
		"LICENSES": &bintree{tmpLicenses, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

